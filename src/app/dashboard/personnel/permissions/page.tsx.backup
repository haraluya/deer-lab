// src/app/dashboard/personnel/permissions/page.tsx
'use client';

import React, { useEffect, useState, useCallback } from 'react';
import { useApiForm } from '@/hooks/useApiClient';
import { AdminOnly } from '@/components/PermissionGate';
import { usePermission } from '@/hooks/usePermission';
// 移除角色編輯功能 - 僅使用預設三個角色
// import { RoleEditDialog } from '@/components/RoleEditDialog';
// import { RoleCreateDialog } from '@/components/RoleCreateDialog';
import { UserRoleAssignDialog } from '@/components/UserRoleAssignDialog';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Separator } from '@/components/ui/separator';
import { 
  Shield, Users, Settings, Plus, Edit3, Trash2, 
  Eye, UserCheck, AlertTriangle, CheckCircle, 
  Lock, Unlock, Crown, User, X, ArrowLeft, Info
} from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { toast } from 'sonner';
import Link from 'next/link';

interface Role {
  id: string;
  name: string;
  displayName: string;
  description: string;
  permissions: string[];
  isDefault: boolean;
  color: string;
  createdAt?: any;
  updatedAt?: any;
}

interface UserWithRole {
  id: string;
  uid: string;
  name: string;
  employeeId: string;
  phone?: string;
  roleName?: string;
  roleId?: string;
  status: string;
  permissions?: string[];
}

function PermissionsPageContent() {
  const [roles, setRoles] = useState<Role[]>([]);
  const [users, setUsers] = useState<UserWithRole[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('roles');
  const [selectedRole, setSelectedRole] = useState<Role | null>(null);
  const [showRoleDetailDialog, setShowRoleDetailDialog] = useState(false);
  // 移除角色編輯相關狀態 - 僅使用預設三個角色
  // const [showDeleteConfirmDialog, setShowDeleteConfirmDialog] = useState(false);
  // const [roleToDelete, setRoleToDelete] = useState<Role | null>(null);
  // const [showEditRoleDialog, setShowEditRoleDialog] = useState(false);
  // const [editingRole, setEditingRole] = useState<Role | null>(null);
  // const [showCreateRoleDialog, setShowCreateRoleDialog] = useState(false);
  const [showUserRoleAssignDialog, setShowUserRoleAssignDialog] = useState(false);
  const [assigningUser, setAssigningUser] = useState<UserWithRole | null>(null);
  
  const { isAdmin } = usePermission();
  const apiClient = useApiForm();

  // 載入角色列表
  const fetchRoles = useCallback(async () => {
    console.log('📋 開始載入角色列表');
    
    // 優先嘗試本地 Firestore 查詢（避免 Functions 問題）
    try {
      const { getFirestore, collection, getDocs, orderBy, query } = await import('firebase/firestore');
      const db = getFirestore();
      
      console.log('🔥 使用本地 Firestore 載入角色');
      const rolesQuery = query(collection(db, 'roles'), orderBy('createdAt', 'asc'));
      const rolesSnapshot = await getDocs(rolesQuery);
      
      const localRoles = rolesSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as Role[];
      
      setRoles(localRoles);
      
      if (localRoles.length === 0) {
        console.log('⚠️  系統中沒有角色');
        toast.info('系統中尚未有角色，請初始化預設角色');
      } else {
        console.log(`✅ 成功載入 ${localRoles.length} 個角色:`, localRoles.map(r => r.displayName));
        toast.success(`成功載入 ${localRoles.length} 個角色`);
      }
      return; // 成功後直接返回
    } catch (localError) {
      console.warn('⚠️  本地 Firestore 查詢失敗，嘗試 Functions:', localError);
    }

    // 如果本地查詢失敗，才嘗試統一 API 客戶端
    try {
      const result = await apiClient.call('getRoles');
      
      if (result.success && result.data) {
        const apiRoles = result.data.roles || [];
        // 轉換API格式為本地格式
        const convertedRoles: Role[] = apiRoles.map((apiRole: any) => ({
          id: apiRole.id,
          name: apiRole.name,
          displayName: apiRole.name, // 使用name作為displayName
          description: apiRole.description || '',
          permissions: apiRole.permissions,
          isDefault: false, // 預設為非預設角色
          color: 'blue', // 預設顏色
          createdAt: null,
          updatedAt: null,
        }));
        setRoles(convertedRoles);
        toast.success(`載入 ${convertedRoles.length} 個角色（統一 API）`);
      } else {
        toast.error('載入角色列表失敗');
      }
    } catch (error) {
      console.error('❌ 統一 API 和本地查詢都失敗:', error);
      toast.error('載入角色列表失敗，請檢查網路連線');
    }
  }, [apiClient]);

  // 載入用戶列表
  const fetchUsers = useCallback(async () => {
    console.log('📋 開始載入用戶列表');
    
    try {
      const { getFirestore, collection, getDocs, orderBy, query } = await import('firebase/firestore');
      const db = getFirestore();
      
      const usersQuery = query(collection(db, 'users'), orderBy('name', 'asc'));
      const usersSnapshot = await getDocs(usersQuery);
      
      const usersList: UserWithRole[] = [];
      
      for (const userDoc of usersSnapshot.docs) {
        const userData = userDoc.data();
        
        // 解析角色資訊
        let roleName = userData.roleName || '未設定';
        let roleId = '';
        
        if (userData.roleRef) {
          try {
            const { getDoc } = await import('firebase/firestore');
            const roleDoc = await getDoc(userData.roleRef);
            if (roleDoc.exists()) {
              const roleData = roleDoc.data() as any;
              roleName = roleData?.displayName || roleData?.name || '未知角色';
              roleId = roleDoc.id;
            }
          } catch (roleError) {
            console.warn('載入角色資訊失敗:', roleError);
          }
        }
        
        usersList.push({
          id: userDoc.id,
          uid: userData.uid || userDoc.id,
          name: userData.name || '未知用戶',
          employeeId: userData.employeeId || '',
          phone: userData.phone || '',
          roleName,
          roleId,
          status: userData.status || 'active',
          permissions: userData.permissions || [],
        });
      }
      
      setUsers(usersList);
      console.log(`✅ 成功載入 ${usersList.length} 個用戶`);
      
    } catch (error) {
      console.error('❌ 載入用戶列表失敗:', error);
      toast.error('載入用戶列表失敗');
    }
  }, []);

  // 初始化預設角色
  const initializeRoles = async () => {
    console.log('🚀 開始初始化預設角色');

    // 直接使用本地 Firestore 初始化，不依賴 Functions
    try {
      const { getFirestore, collection, doc, setDoc, getDocs, serverTimestamp } = await import('firebase/firestore');
      const db = getFirestore();

      // 檢查是否已有角色
      const rolesCollection = collection(db, 'roles');
      const existingRoles = await getDocs(rolesCollection);

      if (!existingRoles.empty) {
        toast.info('系統已有角色，跳過初始化');
        return;
      }

      console.log('📋 開始建立預設角色（本地模式）');

      // 定義預設角色
      const defaultRoles = [
        {
          name: "admin",
          displayName: "系統管理員",
          description: "擁有系統全部權限，可管理所有功能和用戶",
          permissions: [
            "personnel.view", "personnel.manage", "personnel.create", "personnel.edit", "personnel.delete",
            "roles.view", "roles.manage", "roles.create", "roles.edit", "roles.delete",
            "time.view", "time.manage", "time.create", "time.edit", "time.delete",
            "materials.view", "materials.manage", "materials.create", "materials.edit", "materials.delete",
            "products.view", "products.manage", "products.create", "products.edit", "products.delete",
            "suppliers.view", "suppliers.manage", "suppliers.create", "suppliers.edit", "suppliers.delete",
            "workOrders.view", "workOrders.manage", "workOrders.create", "workOrders.edit", "workOrders.delete",
            "purchaseOrders.view", "purchaseOrders.manage", "purchaseOrders.create", "purchaseOrders.edit", "purchaseOrders.delete",
            "inventory.view", "inventory.manage",
            "system.settings", "system.admin"
          ],
          color: "#dc2626",
          isDefault: true,
          createdAt: serverTimestamp()
        },
        {
          name: "foreman",
          displayName: "生產領班",
          description: "負責生產管理，可管理工單、物料、產品",
          permissions: [
            "workOrders.view", "workOrders.manage", "workOrders.create", "workOrders.edit",
            "materials.view", "materials.manage", "materials.create", "materials.edit",
            "products.view", "products.manage", "products.create", "products.edit",
            "inventory.view", "inventory.manage",
            "time.view", "time.manage"
          ],
          color: "#2563eb",
          isDefault: true,
          createdAt: serverTimestamp()
        },
        {
          name: "timekeeper",
          displayName: "計時人員",
          description: "主要負責工時記錄，可查看生產資料",
          permissions: [
            "time.view", "time.manage", "time.create", "time.edit",
            "workOrders.view",
            "materials.view",
            "products.view",
            "inventory.view"
          ],
          color: "#059669",
          isDefault: true,
          createdAt: serverTimestamp()
        }
      ];

      // 批次建立角色
      let createdCount = 0;
      for (const role of defaultRoles) {
        const roleRef = doc(rolesCollection);
        await setDoc(roleRef, role);
        createdCount++;
        console.log(`✅ 建立角色: ${role.displayName}`);
      }

      toast.success(`成功初始化 ${createdCount} 個預設角色`);
      await fetchRoles(); // 重新載入角色列表

    } catch (error) {
      console.error('初始化角色錯誤:', error);
      
      // 如果 Functions 失敗，嘗試本地 Firestore 初始化
      try {
        const { getFirestore, collection, doc, setDoc, getDocs, serverTimestamp } = await import('firebase/firestore');
        const db = getFirestore();
        
        // 檢查是否已有角色
        const rolesCollection = collection(db, 'roles');
        const existingRoles = await getDocs(rolesCollection);
        
        if (!existingRoles.empty) {
          toast.info('系統已有角色，跳過初始化');
          return;
        }

        // 定義預設角色
        const defaultRoles = [
          {
            id: 'admin',
            name: 'admin',
            displayName: '系統管理員',
            description: '擁有系統全部權限，可管理所有功能和用戶',
            permissions: [
              'personnel.view', 'personnel.manage', 'time.view', 'time.manage',
              'suppliers.view', 'suppliers.manage', 'purchase.view', 'purchase.manage',
              'materials.view', 'materials.manage', 'fragrances.view', 'fragrances.manage',
              'products.view', 'products.manage', 'workOrders.view', 'workOrders.manage',
              'inventory.view', 'inventory.manage', 'inventoryRecords.view', 'cost.view',
              'timeReports.view', 'roles.manage', 'system.settings'
            ],
            isDefault: true,
            color: '#dc2626'
          },
          {
            id: 'foreman',
            name: 'foreman', 
            displayName: '生產領班',
            description: '負責生產管理，可管理工單、物料、產品，無成員管理權限',
            permissions: [
              'suppliers.view', 'purchase.view', 'purchase.manage',
              'materials.view', 'materials.manage', 'fragrances.view', 'fragrances.manage',
              'products.view', 'products.manage', 'workOrders.view', 'workOrders.manage',
              'inventory.view', 'inventory.manage', 'inventoryRecords.view', 'cost.view',
              'timeReports.view', 'time.view', 'time.manage'
            ],
            isDefault: true,
            color: '#2563eb'
          },
          {
            id: 'timekeeper',
            name: 'timekeeper',
            displayName: '計時人員', 
            description: '主要負責工時記錄，可查看生產資料但無法編輯',
            permissions: [
              'materials.view', 'fragrances.view', 'products.view', 'workOrders.view',
              'time.view', 'time.manage'
            ],
            isDefault: true,
            color: '#059669'
          }
        ];

        // 創建角色
        let createdCount = 0;
        for (const role of defaultRoles) {
          const roleRef = doc(db, 'roles', role.id);
          await setDoc(roleRef, {
            ...role,
            createdAt: serverTimestamp(),
            updatedAt: serverTimestamp()
          });
          createdCount++;
        }

        toast.success(`成功初始化 ${createdCount} 個角色（本地模式）`);
        await fetchRoles();
      } catch (localError) {
        console.error('本地初始化角色失敗:', localError);
        toast.error('初始化角色失敗');
      }
    }
  };

  // 修復預設角色標記
  const fixDefaultRoles = async () => {
    try {
      const { getFirestore, doc, updateDoc } = await import('firebase/firestore');
      const db = getFirestore();
      
      // 定義預設角色的 ID 和屬性
      const defaultRoleUpdates = [
        {
          id: 'admin',
          updates: {
            isDefault: true,
            color: '#dc2626',
            name: 'admin',
            displayName: '系統管理員'
          }
        },
        {
          id: 'foreman', 
          updates: {
            isDefault: true,
            color: '#2563eb',
            name: 'foreman',
            displayName: '生產領班'
          }
        },
        {
          id: 'timekeeper',
          updates: {
            isDefault: true,
            color: '#059669',
            name: 'timekeeper',
            displayName: '計時人員'
          }
        }
      ];

      let updatedCount = 0;
      for (const roleUpdate of defaultRoleUpdates) {
        // 尋找對應的角色
        const existingRole = roles.find(role => 
          role.id === roleUpdate.id || 
          role.name === roleUpdate.updates.name ||
          role.displayName === roleUpdate.updates.displayName
        );
        
        if (existingRole) {
          const roleRef = doc(db, 'roles', existingRole.id);
          await updateDoc(roleRef, {
            ...roleUpdate.updates,
            updatedAt: new Date()
          });
          updatedCount++;
        }
      }

      if (updatedCount > 0) {
        toast.success(`成功修復 ${updatedCount} 個預設角色標記`);
        await fetchRoles(); // 重新載入角色
      } else {
        toast.info('未找到需要修復的預設角色');
      }
    } catch (error) {
      console.error('修復預設角色標記錯誤:', error);
      toast.error('修復預設角色標記失敗');
    }
  };

  // 處理角色檢視
  const handleViewRole = (role: Role) => {
    setSelectedRole(role);
    setShowRoleDetailDialog(true);
  };

  // 處理用戶角色分配
  const handleAssignUserRole = (user: UserWithRole) => {
    setAssigningUser(user);
    setShowUserRoleAssignDialog(true);
  };

  // 移除角色編輯相關函數 - 僅使用預設三個角色
  // const handleEditRole = (role: Role) => { ... };
  // const handleCreateRole = () => { ... };
  // const handleDeleteRole = (role: Role) => { ... };
  // const confirmDeleteRole = async () => { ... };

  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true);
      await Promise.all([fetchRoles(), fetchUsers()]);
      setIsLoading(false);
    };

    loadData();
  }, []); // 移除依賴項，只在組件掛載時執行一次

  // 角色顏色對應
  const getRoleColor = (color?: string) => {
    switch (color) {
      case '#dc2626': return 'bg-red-500';
      case '#2563eb': return 'bg-blue-500';
      case '#059669': return 'bg-green-500';
      default: return 'bg-gray-500';
    }
  };

  // 角色圖示對應
  const getRoleIcon = (roleName: string) => {
    switch (roleName) {
      case 'admin': return Crown;
      case 'foreman': return UserCheck;
      case 'timekeeper': return User;
      default: return Shield;
    }
  };

  // 權限描述對應 - 中文化
  const getPermissionDescription = (permission: string): string => {
    const permissionMap: Record<string, string> = {
      // 人員管理
      'personnel.view': '👥 查看人員資料',
      'personnel.manage': '👥 管理人員資料',
      'personnel.create': '👥 新增人員',
      'personnel.edit': '👥 編輯人員',
      'personnel.delete': '👥 刪除人員',

      // 工時管理
      'time.view': '⏰ 查看工時記錄',
      'time.manage': '⏰ 管理工時記錄',
      'time.create': '⏰ 新增工時',
      'time.edit': '⏰ 編輯工時',
      'time.delete': '⏰ 刪除工時',

      // 供應商管理
      'suppliers.view': '🏢 查看供應商',
      'suppliers.manage': '🏢 管理供應商',
      'suppliers.create': '🏢 新增供應商',
      'suppliers.edit': '🏢 編輯供應商',
      'suppliers.delete': '🏢 刪除供應商',

      // 採購管理
      'purchase.view': '🛒 查看採購單',
      'purchase.manage': '🛒 管理採購單',
      'purchaseOrders.view': '🛒 查看採購訂單',
      'purchaseOrders.manage': '🛒 管理採購訂單',
      'purchaseOrders.create': '🛒 新增採購單',
      'purchaseOrders.edit': '🛒 編輯採購單',
      'purchaseOrders.delete': '🛒 刪除採購單',

      // 原料管理
      'materials.view': '🧪 查看原物料',
      'materials.manage': '🧪 管理原物料',
      'materials.create': '🧪 新增原料',
      'materials.edit': '🧪 編輯原料',
      'materials.delete': '🧪 刪除原料',

      // 香精配方
      'fragrances.view': '🌸 查看香精配方',
      'fragrances.manage': '🌸 管理香精配方',

      // 產品管理
      'products.view': '📦 查看產品',
      'products.manage': '📦 管理產品',
      'products.create': '📦 新增產品',
      'products.edit': '📦 編輯產品',
      'products.delete': '📦 刪除產品',

      // 工單管理
      'workOrders.view': '📋 查看生產工單',
      'workOrders.manage': '📋 管理生產工單',
      'workOrders.create': '📋 新增工單',
      'workOrders.edit': '📋 編輯工單',
      'workOrders.delete': '📋 刪除工單',

      // 庫存管理
      'inventory.view': '📊 查看庫存資料',
      'inventory.manage': '📊 管理庫存調整',

      // 記錄與報表
      'inventoryRecords.view': '📈 查看庫存記錄',
      'cost.view': '💰 查看成本資料',
      'timeReports.view': '📋 查看工時報表',

      // 角色權限
      'roles.view': '🔐 查看角色',
      'roles.manage': '🔐 管理角色權限',
      'roles.create': '🔐 新增角色',
      'roles.edit': '🔐 編輯角色',
      'roles.delete': '🔐 刪除角色',

      // 系統管理
      'system.settings': '⚙️ 系統設定管理',
      'system.admin': '👑 系統管理員權限'
    };
    return permissionMap[permission] || `❓ ${permission}`;
  };

  return (
    <div className="p-6 space-y-6">
      {/* 頁面標題 */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Link href="/dashboard/personnel">
            <Button variant="ghost" size="sm" className="flex items-center gap-2">
              <ArrowLeft className="h-4 w-4" />
              返回成員管理
            </Button>
          </Link>
          <div>
            <h1 className="text-2xl font-bold text-foreground">權限管理</h1>
            <p className="text-muted-foreground">管理系統角色和使用者權限分配</p>
          </div>
        </div>
        
        {/* 操作按鈕 */}
        <div className="flex gap-2">
          {roles.length === 0 && (
            <Button onClick={initializeRoles} disabled={apiClient.loading} className="bg-gradient-to-r from-blue-500 to-blue-600">
              <Plus className="mr-2 h-4 w-4" />
              初始化預設角色
            </Button>
          )}
          {roles.length > 0 && (
            <Button 
              onClick={fixDefaultRoles} 
              variant="outline"
              className="border-yellow-300 text-yellow-700 hover:bg-yellow-50"
            >
              <Settings className="mr-2 h-4 w-4" />
              修復預設角色標記
            </Button>
          )}
        </div>
      </div>

      {/* 新手引導提示 */}
      {roles.length === 0 && (
        <Alert className="border-amber-200 bg-gradient-to-r from-amber-50 to-yellow-50">
          <Info className="h-4 w-4 text-amber-600" />
          <AlertTitle className="text-amber-800 font-semibold">
            🚀 歡迎使用權限管理系統
          </AlertTitle>
          <AlertDescription className="text-amber-700 text-sm">
            <div className="space-y-2">
              <div><strong>首次使用提醒</strong>：系統檢測到您是第一次使用權限管理功能</div>
              <div className="space-y-1">
                <div>📋 <strong>初始化步驟</strong>：</div>
                <div className="ml-4 space-y-1">
                  <div>1️⃣ 點擊右上角「初始化預設角色」按鈕</div>
                  <div>2️⃣ 系統會自動建立三種角色：系統管理員、生產領班、計時人員</div>
                  <div>3️⃣ 完成後您可以在「用戶分配」標籤中為成員指派角色</div>
                </div>
                <div>💡 <strong>權限說明</strong>：角色系統將控制用戶在系統中可以訪問的功能範圍</div>
              </div>
            </div>
          </AlertDescription>
        </Alert>
      )}

      {roles.length > 0 && roles.filter(r => r.isDefault).length < 3 && (
        <Alert className="border-yellow-300 bg-gradient-to-r from-yellow-50 to-amber-50">
          <AlertTriangle className="h-4 w-4 text-yellow-600" />
          <AlertTitle className="text-yellow-800 font-semibold">
            ⚠️ 預設角色不完整
          </AlertTitle>
          <AlertDescription className="text-yellow-700 text-sm">
            <div>系統偵測到預設角色配置可能不完整。建議點擊「修復預設角色標記」按鈕來確保權限系統正常運作。</div>
          </AlertDescription>
        </Alert>
      )}

      {/* 統計卡片 */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Shield className="h-8 w-8 text-blue-600" />
              <div>
                <p className="text-sm text-blue-600 font-medium">總角色數</p>
                <p className="text-2xl font-bold text-blue-800">{roles.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-50 to-green-100 border-green-200">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-8 w-8 text-green-600" />
              <div>
                <p className="text-sm text-green-600 font-medium">預設角色</p>
                <p className="text-2xl font-bold text-green-800">
                  {roles.filter(r => r.isDefault).length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Users className="h-8 w-8 text-purple-600" />
              <div>
                <p className="text-sm text-purple-600 font-medium">已分配用戶</p>
                <p className="text-2xl font-bold text-purple-800">{users.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-indigo-50 to-indigo-100 border-indigo-200">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-8 w-8 text-indigo-600" />
              <div>
                <p className="text-sm text-indigo-600 font-medium">系統狀態</p>
                <p className="text-lg font-bold text-indigo-800">
                  {roles.filter(r => r.isDefault).length === 3 ? '正常' : '需檢查'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* 主要內容區域 */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="roles" className="flex items-center gap-2">
            <Shield className="h-4 w-4" />
            角色管理
          </TabsTrigger>
          <TabsTrigger value="assignments" className="flex items-center gap-2">
            <Users className="h-4 w-4" />
            權限分配
          </TabsTrigger>
        </TabsList>

        {/* 角色管理分頁 */}
        <TabsContent value="roles" className="space-y-4">
          <div className="flex justify-between items-center">
            <div>
              <h3 className="text-lg font-semibold">角色列表</h3>
              <p className="text-sm text-muted-foreground">管理系統角色和權限配置</p>
            </div>
            {/* 移除新增角色按鈕 - 僅使用預設三個角色 */
          </div>
          
          {isLoading ? (
            <div className="flex items-center justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {roles.map((role) => {
                const Icon = getRoleIcon(role.name);
                
                return (
                  <Card key={role.id} className="hover:shadow-md transition-shadow">
                    <CardHeader className="pb-3">
                      <div className="flex items-start justify-between">
                        <div className="flex items-center space-x-3">
                          <div className={`p-2 rounded-lg ${getRoleColor(role.color)}`}>
                            <Icon className="h-4 w-4 text-white" />
                          </div>
                          <div>
                            <CardTitle className="text-lg">{role.displayName}</CardTitle>
                            <p className="text-sm text-muted-foreground">{role.name}</p>
                          </div>
                        </div>
                        
                        {role.isDefault && (
                          <Badge variant="outline" className="text-xs">
                            <Lock className="mr-1 h-3 w-3" />
                            預設
                          </Badge>
                        )}
                      </div>
                    </CardHeader>
                    
                    <CardContent className="space-y-3">
                      <p className="text-sm text-muted-foreground">{role.description}</p>
                      
                      <div>
                        <p className="text-sm font-medium mb-2">權限數量</p>
                        <Badge variant="secondary">
                          {role.permissions?.length || 0} 項權限
                        </Badge>
                      </div>
                      
                      <div className="flex space-x-2">
                        <Button 
                          size="sm" 
                          variant="outline" 
                          className="flex-1"
                          onClick={() => handleViewRole(role)}
                        >
                          <Eye className="mr-2 h-4 w-4" />
                          檢視
                        </Button>

                        {/* 移除編輯和刪除按鈕 - 預設角色不允許修改 */}
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          )}
        </TabsContent>

        {/* 權限分配分頁 */}
        <TabsContent value="assignments">
          <Card>
            <CardHeader>
              <CardTitle>用戶角色分配</CardTitle>
              <p className="text-muted-foreground">為用戶指派角色和權限</p>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <div className="flex items-center justify-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                </div>
              ) : (
                <div className="space-y-4">
                  {users.length === 0 ? (
                    <div className="text-center py-8">
                      <Users className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
                      <p className="text-muted-foreground">目前沒有用戶資料</p>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {users.map((user) => (
                        <Card key={user.id} className="hover:shadow-md transition-shadow">
                          <CardHeader className="pb-3">
                            <div className="flex items-center justify-between">
                              <div>
                                <CardTitle className="text-base">{user.name}</CardTitle>
                                <p className="text-sm text-muted-foreground">#{user.employeeId}</p>
                              </div>
                              <Badge variant={user.status === 'active' ? 'default' : 'secondary'}>
                                {user.status === 'active' ? '活躍' : '非活躍'}
                              </Badge>
                            </div>
                          </CardHeader>
                          <CardContent className="space-y-3">
                            <div>
                              <p className="text-sm font-medium">當前角色</p>
                              <Badge variant="outline" className="mt-1">
                                {user.roleName || '未設定'}
                              </Badge>
                            </div>
                            <Button 
                              size="sm" 
                              variant="outline" 
                              className="w-full"
                              onClick={() => handleAssignUserRole(user)}
                            >
                              編輯角色
                            </Button>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* 角色詳情對話框 - 美化版本 */}
      <Dialog open={showRoleDetailDialog} onOpenChange={setShowRoleDetailDialog}>
        <DialogContent className="max-w-4xl max-h-[85vh] overflow-hidden">
          <DialogHeader className="pb-4">
            <DialogTitle className="flex items-center gap-4">
              {selectedRole && (
                <>
                  <div className={`p-3 rounded-xl ${getRoleColor(selectedRole.color)} shadow-lg`}>
                    {React.createElement(getRoleIcon(selectedRole.name), { className: "h-6 w-6 text-white" })}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-3">
                      <span className="text-xl font-bold">{selectedRole.displayName}</span>
                      <Badge
                        variant={selectedRole.isDefault ? "default" : "secondary"}
                        className="text-sm px-3 py-1"
                      >
                        {selectedRole.isDefault ? '🔒 預設角色' : '✨ 自訂角色'}
                      </Badge>
                    </div>
                  </div>
                </>
              )}
            </DialogTitle>
            <DialogDescription className="text-base text-gray-600 bg-gray-50 p-3 rounded-lg border-l-4 border-blue-400">
              {selectedRole?.description}
            </DialogDescription>
          </DialogHeader>

          {selectedRole && (
            <div className="space-y-6">
              {/* 角色基本資訊卡片 */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <Card className="bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
                  <CardContent className="p-4 text-center">
                    <Shield className="h-8 w-8 text-blue-600 mx-auto mb-2" />
                    <p className="text-sm font-medium text-blue-600">角色識別碼</p>
                    <p className="text-lg font-bold text-blue-800">{selectedRole.name}</p>
                  </CardContent>
                </Card>

                <Card className="bg-gradient-to-br from-green-50 to-green-100 border-green-200">
                  <CardContent className="p-4 text-center">
                    <CheckCircle className="h-8 w-8 text-green-600 mx-auto mb-2" />
                    <p className="text-sm font-medium text-green-600">擁有權限</p>
                    <p className="text-lg font-bold text-green-800">
                      {selectedRole.permissions?.length || 0} 項
                    </p>
                  </CardContent>
                </Card>

                <Card className="bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200">
                  <CardContent className="p-4 text-center">
                    <Lock className="h-8 w-8 text-purple-600 mx-auto mb-2" />
                    <p className="text-sm font-medium text-purple-600">角色類型</p>
                    <p className="text-lg font-bold text-purple-800">
                      {selectedRole.isDefault ? '系統角色' : '自訂角色'}
                    </p>
                  </CardContent>
                </Card>
              </div>

              <Separator className="my-6" />

              {/* 權限詳情區域 */}
              <div>
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-bold text-gray-800 flex items-center gap-2">
                    <Settings className="h-5 w-5" />
                    權限詳情
                  </h3>
                  <Badge variant="outline" className="text-sm">
                    共 {selectedRole.permissions?.length || 0} 項權限
                  </Badge>
                </div>

                <div className="max-h-64 overflow-y-auto border rounded-xl bg-gray-50 p-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                    {selectedRole.permissions && selectedRole.permissions.length > 0 ? (
                      selectedRole.permissions.map((permission, index) => (
                        <div
                          key={index}
                          className="group flex items-center p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:shadow-md transition-all duration-200"
                        >
                          <div className="flex-1">
                            <div className="font-medium text-sm text-gray-800 group-hover:text-blue-800 transition-colors">
                              {getPermissionDescription(permission)}
                            </div>
                            <div className="text-xs text-gray-500 mt-1 font-mono">
                              {permission}
                            </div>
                          </div>
                          <div className="ml-3">
                            <div className="p-1 bg-green-100 rounded-full">
                              <CheckCircle className="h-4 w-4 text-green-600" />
                            </div>
                          </div>
                        </div>
                      ))
                    ) : (
                      <div className="col-span-full text-center py-12">
                        <AlertTriangle className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                        <h4 className="font-medium text-gray-500 mb-2">尚未設定權限</h4>
                        <p className="text-sm text-gray-400">此角色目前沒有任何權限設定</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}

          <DialogFooter className="pt-6 border-t">
            <Button
              variant="outline"
              onClick={() => setShowRoleDetailDialog(false)}
              className="px-8"
            >
              關閉
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* 移除角色建立和編輯對話框 - 僅使用預設三個角色 */}
      
      {/* 用戶角色分配對話框 */}
      <UserRoleAssignDialog
        user={assigningUser}
        open={showUserRoleAssignDialog}
        onOpenChange={setShowUserRoleAssignDialog}
        onSuccess={fetchUsers}
      />

      {/* 移除刪除確認對話框 - 預設角色不允許刪除 */}
    </div>
  );
}

export default function PermissionsPage() {
  const { isAdmin } = usePermission();
  const [roles, setRoles] = useState<Role[]>([]);
  const apiClient = useApiForm();

  // 檢查角色列表
  useEffect(() => {
    const checkRoles = async () => {
      try {
        const { getFirestore, collection, getDocs } = await import('firebase/firestore');
        const db = getFirestore();
        const rolesSnapshot = await getDocs(collection(db, 'roles'));
        setRoles(rolesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Role)));
      } catch (error) {
        console.error('檢查角色失敗:', error);
      }
    };
    checkRoles();
  }, []);

  // 緊急初始化角色功能
  const emergencyInitializeRoles = async () => {
    try {
      const { getFirestore, collection, doc, setDoc, serverTimestamp } = await import('firebase/firestore');
      const db = getFirestore();

      const defaultRoles = [
        {
          name: "admin",
          displayName: "系統管理員",
          description: "擁有系統全部權限，可管理所有功能和用戶",
          permissions: [
            "personnel.view", "personnel.manage", "personnel.create", "personnel.edit", "personnel.delete",
            "roles.view", "roles.manage", "roles.create", "roles.edit", "roles.delete",
            "time.view", "time.manage", "time.create", "time.edit", "time.delete",
            "materials.view", "materials.manage", "materials.create", "materials.edit", "materials.delete",
            "products.view", "products.manage", "products.create", "products.edit", "products.delete",
            "suppliers.view", "suppliers.manage", "suppliers.create", "suppliers.edit", "suppliers.delete",
            "workOrders.view", "workOrders.manage", "workOrders.create", "workOrders.edit", "workOrders.delete",
            "purchaseOrders.view", "purchaseOrders.manage", "purchaseOrders.create", "purchaseOrders.edit", "purchaseOrders.delete",
            "inventory.view", "inventory.manage", "system.settings", "system.admin"
          ],
          color: "#dc2626",
          isDefault: true,
          createdAt: serverTimestamp()
        },
        {
          name: "foreman",
          displayName: "生產領班",
          description: "負責生產管理，可管理工單、物料、產品",
          permissions: [
            "workOrders.view", "workOrders.manage", "workOrders.create", "workOrders.edit",
            "materials.view", "materials.manage", "materials.create", "materials.edit",
            "products.view", "products.manage", "products.create", "products.edit",
            "inventory.view", "inventory.manage", "time.view", "time.manage"
          ],
          color: "#2563eb",
          isDefault: true,
          createdAt: serverTimestamp()
        },
        {
          name: "timekeeper",
          displayName: "計時人員",
          description: "主要負責工時記錄，可查看生產資料",
          permissions: [
            "time.view", "time.manage", "time.create", "time.edit",
            "workOrders.view", "materials.view", "products.view", "inventory.view"
          ],
          color: "#059669",
          isDefault: true,
          createdAt: serverTimestamp()
        }
      ];

      for (const role of defaultRoles) {
        const roleRef = doc(collection(db, 'roles'));
        await setDoc(roleRef, role);
      }

      toast.success('緊急初始化完成！請刷新頁面。');
      setTimeout(() => window.location.reload(), 2000);
    } catch (error) {
      console.error('緊急初始化失敗:', error);
      toast.error('緊急初始化失敗');
    }
  };

  // 如果沒有角色且用戶不是管理員，顯示緊急初始化界面
  if (roles.length === 0 && !isAdmin()) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[400px] space-y-6 p-8">
        <AlertTriangle className="h-16 w-16 text-orange-500" />
        <div className="text-center space-y-4">
          <h2 className="text-xl font-semibold text-foreground">系統需要初始化</h2>
          <p className="text-muted-foreground">檢測到系統尚未配置角色，需要進行初始化設定。</p>
          <Button
            onClick={emergencyInitializeRoles}
            disabled={apiClient.loading}
            className="bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700"
          >
            <Plus className="mr-2 h-4 w-4" />
            緊急初始化系統角色
          </Button>
        </div>
      </div>
    );
  }

  return (
    <AdminOnly fallback={
      <div className="flex flex-col items-center justify-center min-h-[400px] space-y-4">
        <AlertTriangle className="h-16 w-16 text-orange-500" />
        <div className="text-center">
          <h2 className="text-xl font-semibold text-foreground">權限不足</h2>
          <p className="text-muted-foreground">只有系統管理員可以訪問權限管理頁面</p>
        </div>
      </div>
    }>
      <PermissionsPageContent />
    </AdminOnly>
  );
}